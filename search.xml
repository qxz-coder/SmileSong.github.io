<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python_bytecode</title>
      <link href="/2022/07/19/python-bytecode/"/>
      <url>/2022/07/19/python-bytecode/</url>
      
        <content type="html"><![CDATA[<p>昨天汇报完论文，这两天要准备考试，抓住休息的空档，解决一下之前遗留的题目。</p><span id="more"></span><h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719110634665.png" alt="image-20220719110634665"></p><ul><li><p>这道题是n1book上的题目，之前刷buuctf的时候尝试了一下，发现easy_python并不easy <span class="github-emoji"><span>😫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li><li><p>之前对python字节码这块完全不了解，只会使用一些网站和工具尝试反编译</p></li><li><p>看了官方的wp，才知道原来python bytecode也可以混淆</p></li></ul><h3 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h3><p>题目提供的是一个pyc文件，首先尝试使用marshal和dis获取bytecode</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis,marshal</span><br><span class="line">ifile=<span class="built_in">open</span>(<span class="string">'easy_python.pyc'</span>,<span class="string">'rb'</span>)</span><br><span class="line">header=ifile.read(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">code=marshal.load(ifile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print code.co_names</span></span><br><span class="line"></span><br><span class="line">dis.dis(code)</span><br></pre></td></tr></tbody></table></figure><p>题目中提示了python环境，这里必须使用python2.7来运行</p><p>第三行的read header的操作是必要的，否则marshal会出错 （咱也不清楚为啥，模仿其他人的操作</p><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719112146220.png" alt="image-20220719112146220"></p><p>emmm,在这里卡了很久，然后看了一下官方提供的wp <a href="https://pan.baidu.com/s/16p8ADuKJZI4xb_HWOS-OwA">https://pan.baidu.com/s/16p8ADuKJZI4xb_HWOS-OwA</a></p><p>(密码:rt7o）大致意思是需要对pyc 字节码解混淆之后才能够dis</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>这里我先了解了一下字节码解混淆的相关知识 <a href="https://www.anquanke.com/post/id/185481">https://www.anquanke.com/post/id/185481</a></p><p>python字节码在处理过程大致如下:</p><p>首先所有的指令可以分为两类，不需要参数和需要参数的，Python字节码在设计的时候故意把没有参数的指令分配在了对应编号的低位，高位都是有参数的，以<code>Include/opcode.h</code>中的<code>HAVE_ARGUMENT</code>分界。他们的在二进制级别上的组织是这样的：</p><ul><li><code>[指令]</code> 不需要参数的指令只占用一个字节</li><li><code>[指令] [参数低字节] [参数高字节]</code> 需要参数的指令占用三个字节，一个字节指令，两个字节参数</li></ul><p>例子如下:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a+b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.__code__.co_code</span><br><span class="line"><span class="string">'|x00x00|x01x00x17S'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dis</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(add.__code__.co_code)</span><br><span class="line">          <span class="number">0</span> LOAD_FAST           <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">          <span class="number">3</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">          <span class="number">6</span> BINARY_ADD</span><br><span class="line">          <span class="number">7</span> RETURN_VALUE</span><br></pre></td></tr></tbody></table></figure><p>|x00x00 表示成16进制: 7c 00 00 </p><p>7c对应的是指令的索引，当索引大于dis.HAVE_ARGUMENT的时候，指令是有参数的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.opname[<span class="built_in">ord</span>(<span class="string">'|'</span>)]</span><br><span class="line"><span class="string">'LOAD_FAST'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><p>而0x7c对应的指令是LOAD_FAST，参数=0*256+0</p><p>所以|x00x00解释成指令 LOAD_FAST           0 (0)</p><p>但是如果遇到junk code的时候，可能会由于解析的时候数组越界，导致dis失败，比如下面的代码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>,code.co_code[:<span class="number">9</span>]))</span><br><span class="line">[<span class="number">113</span>, <span class="number">158</span>, <span class="number">2</span>, <span class="number">136</span>, <span class="number">104</span>, <span class="number">110</span>, <span class="number">126</span>, <span class="number">58</span>, <span class="number">140</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.opname[<span class="number">113</span>]</span><br><span class="line"><span class="string">'JUMP_ABSOLUTE'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>*<span class="number">256</span>+<span class="number">158</span></span><br><span class="line"><span class="number">670</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.opname[<span class="number">136</span>]</span><br><span class="line"><span class="string">'LOAD_DEREF'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">110</span>*<span class="number">256</span>+<span class="number">104</span></span><br><span class="line"><span class="number">28264</span></span><br></pre></td></tr></tbody></table></figure><p>应当被解析成:</p><p> JUMP_ABSOLUTE 670</p><p> LOAD_DEREF 28264</p><p>显然第二条指令越界了，但是由于jump跳转，第二条指令实际上是不会被执行到的，也就是所谓的dead code()</p><p>pyc文件作者是故意加入不影响执行的非法指令触发分析软件崩溃，阻碍对该pyc文件的分析。</p><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><p>在github上面找了很久有关python bytecode反混淆的，最后发现了 </p><p>使用python2.7配置相应环境，然后运行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install networkx==1.11 pydotplus </span><br><span class="line">py2 main.py -i easy_python.pyc -o de_easypy.pyc</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719130618404.png" alt="image-20220719130618404"></p><p>将输出的de_easypy.pyc 拖到pyc反编译网站<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><p>得到源码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">rc4</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, public_key = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> public_key:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.public_key = <span class="string">'none_public_key'</span></span><br><span class="line">        key = hashlib.md5(self.public_key).hexdigest()</span><br><span class="line">        self.keya = hashlib.md5(key[<span class="number">0</span>:<span class="number">16</span>]).hexdigest()</span><br><span class="line">        self.keyb = hashlib.md5(key[<span class="number">16</span>:<span class="number">32</span>]).hexdigest()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, string</span>):</span><br><span class="line">        string = hashlib.md5(string + self.keyb).hexdigest()[<span class="number">0</span>:<span class="number">16</span>] + string</span><br><span class="line">        self.result = <span class="string">''</span></span><br><span class="line">        self.docrypt(string)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(self.result)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, string</span>):</span><br><span class="line">        string = base64.b64decode(string)</span><br><span class="line">        self.result = <span class="string">''</span></span><br><span class="line">        self.docrypt(string)</span><br><span class="line">        result = self.result</span><br><span class="line">        <span class="keyword">if</span> result[:<span class="number">16</span>] == hashlib.md5(result[<span class="number">16</span>:] + self.keyb).hexdigest()[<span class="number">0</span>:<span class="number">16</span>]:</span><br><span class="line">            <span class="keyword">return</span> result[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">docrypt</span>(<span class="params">self, string</span>):</span><br><span class="line">        string_lenth = <span class="built_in">len</span>(string)</span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        randkey = []</span><br><span class="line">        cryptkey = self.keya + hashlib.md5(self.keya).hexdigest()</span><br><span class="line">        key_lenth = <span class="built_in">len</span>(cryptkey)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">255</span>):</span><br><span class="line">            randkey.append(<span class="built_in">ord</span>(cryptkey[i % key_lenth]))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">255</span>):</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            j = (j + box[i] + randkey[i]) % <span class="number">256</span></span><br><span class="line">            tmp = box[i]</span><br><span class="line">            box[i] = box[j]</span><br><span class="line">            box[j] = tmp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(string_lenth):</span><br><span class="line">            a = j = <span class="number">0</span></span><br><span class="line">            a = (a + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + box[a]) % <span class="number">256</span></span><br><span class="line">            tmp = box[a]</span><br><span class="line">            box[a] = box[j]</span><br><span class="line">            box[j] = tmp</span><br><span class="line">            self.result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(string[i]) ^ box[(box[a] + box[j]) % <span class="number">256</span>])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rc = rc4(<span class="string">'zBhzAVLG6XTu2w0H'</span>)</span><br><span class="line">    string = raw_input(<span class="string">'Input your flag:'</span>)</span><br><span class="line">    rlt = rc.encode(string)</span><br><span class="line">    <span class="built_in">print</span> rlt</span><br><span class="line">    <span class="keyword">if</span> rlt == <span class="string">'oxurpmahzeM2kHKblmTkWlLpb2i5jXKrBN/uf3+Xn5n0lYKMJA=='</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'True!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'False!'</span></span><br></pre></td></tr></tbody></table></figure><p>encode和decode操作是对应的，理论上将比较字符串的内容作为输入，然后调用decode函数就能获取flag，但是可能在处理过程中出现了一些差错，直接decode的得到的结果是不对的。</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719132158369.png" alt="image-20220719132158369"></p><h3 id="最终办法"><a href="#最终办法" class="headerlink" title="最终办法"></a>最终办法</h3><p>这里需要换个思路，直接修改py源码是没办法得到正确结果的，如果能修改原始pyc文件，将encode替换成decode，然后输入oxurpmahzeM2kHKblmTkWlLpb2i5jXKrBN/uf3+Xn5n0lYKMJA== 就可以得到flag</p><p>去混淆之后使用dis再次解析:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55</span>          <span class="number">79</span> NOP</span><br><span class="line">            <span class="number">80</span> NOP</span><br><span class="line">            <span class="number">81</span> NOP</span><br><span class="line">            <span class="number">82</span> NOP</span><br><span class="line">            <span class="number">83</span> NOP</span><br><span class="line">       &gt;&gt;   <span class="number">84</span> LOAD_NAME                <span class="number">8</span> (raw_input)</span><br><span class="line">            <span class="number">87</span> LOAD_CONST               <span class="number">6</span> (<span class="string">'Input your flag:'</span>)</span><br><span class="line">            <span class="number">90</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">93</span> STORE_NAME               <span class="number">9</span> (string)</span><br><span class="line">            <span class="number">96</span> LOAD_NAME                <span class="number">7</span> (rc)</span><br><span class="line">            <span class="number">99</span> LOAD_ATTR               <span class="number">10</span> (encode)</span><br><span class="line">           <span class="number">102</span> LOAD_NAME                <span class="number">9</span> (string)</span><br><span class="line">           <span class="number">105</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">           <span class="number">108</span> STORE_NAME              <span class="number">11</span> (rlt)</span><br><span class="line">           <span class="number">111</span> JUMP_FORWARD            <span class="number">79</span> (to <span class="number">193</span>)</span><br><span class="line">           <span class="number">114</span> NOP</span><br></pre></td></tr></tbody></table></figure><blockquote><p>encode附近的字节码</p></blockquote><p>使用dis命令可以获取LOAD_ATTR对应的索引</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(dis.opname.index(<span class="string">'LOAD_ATTR'</span>))</span><br><span class="line"><span class="string">'0x6a'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p>于是 LOAD_ATTR               10 (encode)对应的 十六进制为 6a 0a 00</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719131609836.png" alt="image-20220719131609836"></p><p>10表示的是encode早co_name中的索引，可以通过code.co_names查看所有的co_name</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719131801203.png" alt="image-20220719131801203"></p><p>修改encode最简单的办法就是直接在pyc文件中搜索encode并替换成decode(注意不要替换b64encode)</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719131908874.png" alt="image-20220719131908874"></p><p>然后将修改的pyc脚本运行起来</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py2 easy_python.pyc</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220719132034271.png" alt="image-20220719132034271"></p><blockquote><p>成功获得flag: n1book{JUnk_c0D3_p7c}</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> rev </tag>
            
            <tag> ctf </tag>
            
            <tag> python </tag>
            
            <tag> bytecode </tag>
            
            <tag> obfuscate </tag>
            
            <tag> n1book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angstromctf rev</title>
      <link href="/2022/05/05/angstromctf-rev/"/>
      <url>/2022/05/05/angstromctf-rev/</url>
      
        <content type="html"><![CDATA[<p>五一期间参加的angstromctf，大多数题目还是挺有意思，挺典型的。特别是最后一道weebhunter2花了2天时间才做出来，但是感觉很值得，学到了不少东西。</p><span id="more"></span><h3 id="uninspired"><a href="#uninspired" class="headerlink" title="uninspired"></a>uninspired</h3><p>一道有趣的数学题<br>检测逻辑:<br><img src="https://i.imgur.com/zlGSY6u.png"></p><p>输入十个0-9的整数array[0-9]，需要满足：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array[i]=sumj(array[j]=i)</span><br><span class="line"><span class="comment"># 比如array[0]=9,表示 array中有9个的数值为0，而array[9]&gt;=1,因为arr</span></span><br></pre></td></tr></tbody></table></figure><p>从0的个数开始从大到小枚举就行，最终得到如下的输入：<br> 6210001000满足上述条件</p><p><img src="https://i.imgur.com/SzL9ZeN.png"><br>flag:actf{ten_digit_numbers_are_very_inspiring}</p><h3 id="dny"><a href="#dny" class="headerlink" title="dny"></a>dny</h3><p>又是我们的老朋友rust：）<br>检验逻辑: 变换输入字符串，然后compare</p><ol><li><p>首先是获取输入<br><img src="https://i.imgur.com/vYFdGFK.png"></p><blockquote><p>格式要求 actf{xxx}</p></blockquote></li><li><p>然后交换一下字符串的顺序<br><img src="https://i.imgur.com/nlPvhtw.png"></p><blockquote><p>比较简单</p></blockquote></li><li><p>最后进行比较</p></li></ol><p><img src="https://i.imgur.com/UnMbI7m.png"></p><p>脚本如下:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">compare=<span class="string">b"_ynourtsd_tet_eh2_bfiasl7cedbda7"</span></span><br><span class="line">test1=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ012345"</span> <span class="comment"># 测试输入</span></span><br><span class="line">test2=<span class="built_in">list</span>(<span class="string">"FEHGBADCNMPOJILKVUXWRQTS3254ZY10"</span>) <span class="comment"># 变换后的输入   </span></span><br><span class="line"></span><br><span class="line">seq=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    seq[i]=test1.index(test2[i])</span><br><span class="line"><span class="built_in">print</span>(seq)    </span><br><span class="line">    </span><br><span class="line">res=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    res[i]=compare[seq[i]]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">b'actf{'</span>+<span class="built_in">bytes</span>(res)+<span class="string">b'}'</span></span><br><span class="line"><span class="built_in">print</span>(flag)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># actf{rusty_on_the_details_2fbdb7ac7de}</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>flag:actf{rusty_on_the_details_2fbdb7ac7de}</p><h3 id="Flatland"><a href="#Flatland" class="headerlink" title="Flatland"></a>Flatland</h3><ul><li>控制流平坦化了，分析起来比较棘手</li><li>检测逻辑如下:<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">{</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ebp</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v10; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> inputchar; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v15; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v17[<span class="number">51205</span>]; <span class="comment">// [rsp+0h] [rbp-64028h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">puts</span>(</span><br><span class="line">          <span class="string">"I call our world Flatland, not because we call it so, but to make its nature clearer to you, my happy solvers,"</span></span><br><span class="line">          <span class="string">" who are privileged to have control flow."</span>);</span><br><span class="line">        v7 = (__int64)v6 &lt;&lt; <span class="number">12</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">2</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">4</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">6</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">8</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">10</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">12</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">14</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">16</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">18</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">20</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">22</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">24</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">26</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">28</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">30</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        *(_OWORD *)((<span class="type">char</span> *)&amp;v17[<span class="number">32</span>] + v7) = <span class="number">0LL</span>;</span><br><span class="line">        ++v6;</span><br><span class="line">        v4 = <span class="number">1LL</span>;</span><br><span class="line">        v5 = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v10 = (__int64)v6 &lt;&lt; <span class="number">12</span>;</span><br><span class="line">        *(__int64 *)((<span class="type">char</span> *)v17 + v10) = v3;</span><br><span class="line">        *((_BYTE *)&amp;v17[<span class="number">2</span>] + v10 + v3) = <span class="number">1</span>;</span><br><span class="line">        *(__int64 *)((<span class="type">char</span> *)&amp;v17[<span class="number">1</span>] + v10) = <span class="number">1LL</span>;</span><br><span class="line">        v5 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v8 = (__int64)v6 &lt;&lt; <span class="number">12</span>;</span><br><span class="line">        *(__int64 *)((<span class="type">char</span> *)v17 + v8) = v3;</span><br><span class="line">        *((_BYTE *)&amp;v17[<span class="number">2</span>] + v8 + v3) = <span class="number">1</span>;</span><br><span class="line">        v9 = *(__int64 *)((<span class="type">char</span> *)&amp;v17[<span class="number">1</span>] + v8) + <span class="number">1</span>;<span class="comment">// 记录读取数据的次数</span></span><br><span class="line">        *(__int64 *)((<span class="type">char</span> *)&amp;v17[<span class="number">1</span>] + v8) = v9;</span><br><span class="line">        v5 = <span class="number">2</span> * (v9 == <span class="number">24</span>) + <span class="number">4</span>;                <span class="comment">// 输入长度为24</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:                                   <span class="comment">// error information</span></span><br><span class="line">        v14 = <span class="number">1</span>;</span><br><span class="line">        v15 = <span class="string">"All the substantial binaries of Flatland itself appear no better than the offspring of a diseased imaginat"</span></span><br><span class="line">              <span class="string">"ion, or the baseless instructions of a CPU."</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        ++v6;</span><br><span class="line">        v4 = <span class="number">5LL</span>;</span><br><span class="line">        v5 = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v11 = v17[<span class="number">512</span> * (__int64)v6];</span><br><span class="line">        <span class="keyword">if</span> ( v3 == dword_402090[v11]            <span class="comment">// 四项至少成立一项</span></span><br><span class="line">          || v11 == dword_402090[v3]</span><br><span class="line">          || v3 == dword_4020F0[v11]</span><br><span class="line">          || (v5 = <span class="number">3</span>, v11 == dword_4020F0[v3]) )</span><br><span class="line">        {</span><br><span class="line">          v5 = <span class="number">3</span> - (*((_BYTE *)&amp;v17[<span class="number">512</span> * (__int64)v6 + <span class="number">2</span>] + v3) == <span class="number">0</span>);<span class="comment">// 后一项等式必须成立，下标不能相同</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:                                   <span class="comment">// right</span></span><br><span class="line">        v14 = <span class="number">0</span>;</span><br><span class="line">        v15 = <span class="string">"Now you have truly understood the secrets of Flatland."</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        v17[<span class="number">512</span> * (__int64)v6] = <span class="number">0LL</span>;           <span class="comment">// 循环变量 i</span></span><br><span class="line">        v5 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v5 = <span class="number">2</span> * (v17[<span class="number">512</span> * (__int64)v6] != <span class="number">24</span>) + <span class="number">9</span>;<span class="comment">// i不能为24</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:                                   <span class="comment">// goto error</span></span><br><span class="line">        --v6;</span><br><span class="line">        v3 = <span class="number">-1LL</span>;</span><br><span class="line">        v5 = v4;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        ++v17[<span class="number">512</span> * (__int64)v6];</span><br><span class="line">        v5 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v5 = <span class="number">2</span> * (v3 == aNftrcd1ontrw4M[v17[<span class="number">512</span> * (__int64)v6]]) + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v3 = v17[<span class="number">512</span> * (__int64)v6--];          <span class="comment">// v3=index,v6--</span></span><br><span class="line">        v5 = v4;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        inputchar = getc(<span class="built_in">stdin</span>);                <span class="comment">// 获取输入</span></span><br><span class="line">        v17[<span class="number">512</span> * (__int64)v6] = inputchar;</span><br><span class="line">        v13 = inputchar == <span class="number">-1</span>;</span><br><span class="line">        v5 = <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v13 )</span><br><span class="line">          v5 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        v17[<span class="number">512</span> * (__int64)v6 + <span class="number">1</span>] = v4;</span><br><span class="line">        v3 = v17[<span class="number">512</span> * (__int64)v6++];</span><br><span class="line">        v4 = <span class="number">15LL</span>;</span><br><span class="line">        v5 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        v5 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">-1</span> )</span><br><span class="line">          v5 = v17[<span class="number">512</span> * (__int64)v6 + <span class="number">1</span>];</span><br><span class="line">        --v6;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">puts</span>(v15);</span><br><span class="line">  <span class="keyword">return</span> v14;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>成功的提示对应case6，失败对应case3，case5是对输入的下标的判断，必须满足数组直接的关系<br>所有输入的字符串都储存在aNftrcd1ontrw4M中<br>aNftrcd1ontrw4M=”NfTRcD1ontrw}4{mFl_Ad0ua”</p></blockquote></li></ul><blockquote><p>逻辑流分析的过程大致如下<br><img src="https://i.imgur.com/FxdSJBI.png"></p></blockquote><p>大致思路就是调整上面的字符串的顺序，case5中的两个数组来检验下标顺序是否正确</p><p>用python写了一个回溯算法的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">b"NfTRcD1ontrw}4{mFl_Ad0ua"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(string))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x401140</span></span><br><span class="line"></span><br><span class="line">dword_402090 = [<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">22</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">19</span>,<span class="number">19</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">dword_4020F0=  [<span class="number">17</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">19</span>]</span><br><span class="line">flag=<span class="literal">False</span></span><br><span class="line">res=[<span class="number">23</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">current</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(current)==<span class="number">24</span> <span class="keyword">and</span> current[-<span class="number">1</span>]==<span class="number">12</span>:</span><br><span class="line">        flag=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 最多四个方向</span></span><br><span class="line">    choices=[dword_402090[current[-<span class="number">1</span>]]]</span><br><span class="line">    <span class="keyword">if</span> dword_4020F0[current[-<span class="number">1</span>]] <span class="keyword">not</span> <span class="keyword">in</span> choices:</span><br><span class="line">        choices.append(dword_4020F0[current[-<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">if</span> current[-<span class="number">1</span>] <span class="keyword">in</span> dword_402090 <span class="keyword">and</span> dword_402090.index(current[-<span class="number">1</span>]) <span class="keyword">not</span> <span class="keyword">in</span> choices:</span><br><span class="line">        choices.append(dword_402090.index(current[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> current[-<span class="number">1</span>] <span class="keyword">in</span> dword_4020F0 <span class="keyword">and</span> dword_4020F0.index(current[-<span class="number">1</span>]) <span class="keyword">not</span> <span class="keyword">in</span> choices:</span><br><span class="line">        choices.append(dword_4020F0.index(current[-<span class="number">1</span>])) </span><br><span class="line">    copy=current         </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> choices:</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">not</span> <span class="keyword">in</span> current):</span><br><span class="line">            <span class="keyword">if</span> i!=<span class="number">12</span> <span class="keyword">or</span> <span class="built_in">len</span>(current)==<span class="number">23</span>:</span><br><span class="line">                current.append(i)       <span class="comment"># 做选择</span></span><br><span class="line">                <span class="keyword">if</span> backtrack(current):        <span class="comment"># 判断选择是否正确</span></span><br><span class="line">                    flag=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:                   </span><br><span class="line">                    current.pop()        <span class="comment"># 撤销选择</span></span><br><span class="line">                </span><br><span class="line">    flag=<span class="literal">False</span>        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> backtrack(res):</span><br><span class="line">    <span class="built_in">print</span>(res)        </span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">flag=[]            </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    flag.append(string[res[i]])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))    </span><br><span class="line"><span class="comment"># actf{Fl4TmAn_rouNdw0R1D}</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>flag:actf{Fl4TmAn_rouNdw0R1D}</p><h3 id="Beam"><a href="#Beam" class="headerlink" title="Beam"></a>Beam</h3><p>被迫学习一波Erlang语法:(<br>首先二进制文件为beam类型，是由Erlang语言编译得到的<br><img src="https://i.imgur.com/bbw8aZQ.png"></p><p>所以需要进行反编译再分析<br>最终找到一个类似的分析样例:<a href="https://github.com/pwning/public-writeup/blob/master/9447ctf2014/reversing/hellomike/hellomike.md">https://github.com/pwning/public-writeup/blob/master/9447ctf2014/reversing/hellomike/hellomike.md</a></p><p>基本解题步骤: (需要现配一个erl环境)</p><ol><li><p>反编译</p><figure class="highlight erlang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io:format(<span class="string">"~p~n"</span>,[beam_disasm:file(<span class="string">"test.beam"</span>)]).</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/PFuO7lY.png"></p></li><li><p>分析关键函数check</p></li></ol><p><img src="https://i.imgur.com/05NTrd8.png"><br>基本逻辑就是先获取输入，然后加密，最后compare<br>compare字符为”gjsfxpslt”</p><ol start="3"><li>加密函数 check-fun-0<br><img src="https://i.imgur.com/7F1ixch.png"><blockquote><p>就是对输入的字符加1</p></blockquote></li></ol><p>解题脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># io:format("~p~n",[beam_disasm:file("test.beam")]).   </span></span><br><span class="line">pawd=<span class="string">b"gjsfxpslt"</span></span><br><span class="line">res=[m-<span class="number">1</span> <span class="keyword">for</span> m <span class="keyword">in</span> pawd]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(res))</span><br><span class="line"><span class="comment"># fireworks</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/SXW6SQU.png"><br>flag:actf{elixir_is_awesome}</p><blockquote><p>算法不难，但是寻找相关资料、现学语法让人头大</p></blockquote><h3 id="Weeb-Hunters-2"><a href="#Weeb-Hunters-2" class="headerlink" title="Weeb Hunters 2"></a>Weeb Hunters 2</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>很好的一道题，在CTF中打怪兽</li><li>逻辑检查难度中等，爆破比较麻烦</li><li>感谢魏神帮忙逆向rand函数和运行爆破脚本 <span class="github-emoji"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>获得武器，升级武器，与boss战斗<br><img src="https://i.imgur.com/m9PbQxE.png"></p><blockquote><p>源代码一角</p></blockquote><h4 id="解题核心"><a href="#解题核心" class="headerlink" title="解题核心"></a>解题核心</h4><p>解题最核心的部分</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v5 = rand();                            <span class="comment">// 5F10AFD5</span></span><br><span class="line">      srand(*(_DWORD *)s1 ^ v5);              <span class="comment">// 根据输入获取一个种子可控</span></span><br><span class="line">      v10 = rand();</span><br><span class="line">      v11 = rand();</span><br><span class="line">      <span class="keyword">if</span> ( v10 &gt; <span class="number">0</span> )</span><br><span class="line">        v8 += v10;</span><br><span class="line">      <span class="keyword">if</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">        v9 += v11;</span><br></pre></td></tr></tbody></table></figure><ul><li>这里v8，v9用来判断各种情况，如获得武器，升级武器，打怪等等，所以控制v8，v9的变化就控制了逻辑流的走向</li><li>而v8,v9是通过随机数生成函数rand来改变的，我们唯一能控制的就是它的seed,通过输入改变seed,产生特定随机数，然后控制v8,v9</li><li>有一个比较关键的点，v8,v9仅当上传的随机数为整数(即v10&lt;0x8000,v11&lt;0x8000)时才会修改，于是在爆破的时候，定点选择其中一个随机数的后16位，另一个大于0x7fff即可</li></ul><p>下面就需要攻破rand函数，给出指定的输出</p><h4 id="逆向随机函数"><a href="#逆向随机函数" class="headerlink" title="逆向随机函数"></a>逆向随机函数</h4><p>这里要感谢一下<code>魏神</code>，成功逆向了linux库里的rand函数，然后我魔改了一个python版本的:</p><p>python 版本的rand函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myrand</span>(<span class="params">seed_value</span>):</span><br><span class="line">    seed=seed_value</span><br><span class="line">    res=[]</span><br><span class="line">    r=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>)]</span><br><span class="line">    r[<span class="number">0</span>]=seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">        temp=(<span class="number">16807</span> * r[i-<span class="number">1</span>]) % <span class="number">2147483647</span></span><br><span class="line">        r[i]=BitVecVal(temp,<span class="number">32</span>).as_long()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">34</span>):</span><br><span class="line">        r[i]=r[i-<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>,<span class="number">344</span>):</span><br><span class="line">        temp= r[i-<span class="number">31</span>] + r[i-<span class="number">3</span>]</span><br><span class="line">        r[i]=BitVecVal(temp,<span class="number">32</span>).as_long()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">344</span>,<span class="number">344</span>+<span class="number">2</span>):</span><br><span class="line">        temp = r[i-<span class="number">31</span>] + r[i-<span class="number">3</span>]</span><br><span class="line">        r[i]=BitVecVal(temp,<span class="number">32</span>).as_long()</span><br><span class="line">        res.append(r[i]&gt;&gt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> res  </span><br></pre></td></tr></tbody></table></figure><blockquote><p>借助z3的Bitvec处理整数溢出</p></blockquote><h4 id="计算“密码”"><a href="#计算“密码”" class="headerlink" title="计算“密码”"></a>计算“密码”</h4><p>由于进入不同的“副本”需要不同的密码，下面提供z3脚本求解副本需要的密码</p><p>获得和升级武器的密码求解脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">currentx=<span class="number">0xdead</span></span><br><span class="line">currenty=<span class="number">0xbeef</span></span><br><span class="line">currentrand=<span class="number">0x5F10AFD5</span></span><br><span class="line"><span class="comment"># 升级武器的密码</span></span><br><span class="line">v24 = <span class="number">0xD3385C606D740964</span> <span class="comment"># 医生小屋   [y = 14920, x = 13100]                 0x332c,0x3a48</span></span><br><span class="line">v24 = <span class="number">0x33C458487662651A</span> <span class="comment"># 铁匠屋副本 [y = 28076, x = 2230]                  0x8b6,0x6dac   0</span></span><br><span class="line">v24 = <span class="number">0x5B3E7B48765369A3</span> <span class="comment"># 巫师之塔副本  [y = 18171, x = 12120]              0x2f58,0x46fb  1</span></span><br><span class="line">v24 = <span class="number">0xDBE762ED608E186C</span> <span class="comment"># 工程师小屋    [y = 48213, x = 42041]              0xa439,0xbc55  2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据参数，求出对应的v8,v9</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateweapon</span>(<span class="params">v24</span>):    </span><br><span class="line">    x=BitVec(<span class="string">'x'</span>,<span class="number">16</span>)</span><br><span class="line">    y=BitVec(<span class="string">'y'</span>,<span class="number">16</span>)</span><br><span class="line">    s=Solver()</span><br><span class="line"></span><br><span class="line">    one=(v24&gt;&gt;<span class="number">48</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">    two=(v24&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">    three=(v24&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">    four=(v24)&amp;<span class="number">0xffff</span></span><br><span class="line">    s.add((x*y)&amp;<span class="number">0xffff</span>==two)</span><br><span class="line">    s.add((x^y)&amp;<span class="number">0xffff</span>==four)</span><br><span class="line">    s.add(((x&amp;y)+(x|y))&amp;<span class="number">0xffff</span>==three)</span><br><span class="line">    s.add((((x&amp;y)+(x|y))+(x*y)+(x^y)&amp;<span class="number">0xffff</span>==one))</span><br><span class="line">    s.check()</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getweapon</span>(<span class="params">wtype</span>):</span><br><span class="line">    x=BitVec(<span class="string">'x'</span>,<span class="number">16</span>)</span><br><span class="line">    y=BitVec(<span class="string">'y'</span>,<span class="number">16</span>)</span><br><span class="line">    s=Solver()</span><br><span class="line">    s.add((x^y)&amp;<span class="number">7</span>==<span class="number">1</span>)</span><br><span class="line">    s.add(((x^y)&gt;&gt;<span class="number">3</span>)&amp;<span class="number">3</span>==wtype)</span><br><span class="line">    s.add(x&gt;<span class="number">10000</span>,y&gt;<span class="number">10000</span>)</span><br><span class="line">    s.check()</span><br><span class="line">    <span class="comment"># print(s.model())</span></span><br><span class="line">    m=s.model()</span><br><span class="line">    x_value=m[x].as_long()</span><br><span class="line">    y_value=m[y].as_long()</span><br><span class="line">    <span class="keyword">return</span> x_value,y_value</span><br></pre></td></tr></tbody></table></figure><p> 爆破种子的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_input</span>(<span class="params">wtype</span>):</span><br><span class="line">    <span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>,<span class="number">0x7f</span>):</span><br><span class="line">        <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>,<span class="number">0x7f</span>):</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>,<span class="number">0x7f</span>):</span><br><span class="line">                <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>,<span class="number">0x7f</span>):</span><br><span class="line">                    input_value=(i1&lt;&lt;<span class="number">24</span>)|(i2&lt;&lt;<span class="number">16</span>)|(i3&lt;&lt;<span class="number">8</span>)|i4</span><br><span class="line">                    seed=input_value^currentrand</span><br><span class="line">                    rand1,rand2=myrand(input_value^currentrand)</span><br><span class="line">                    <span class="keyword">if</span> rand1&amp;<span class="number">0xffff</span>&lt;<span class="number">0x8000</span> <span class="keyword">and</span> rand2&amp;<span class="number">0xffff</span>&lt;<span class="number">0x8000</span>:</span><br><span class="line">                        realx=(currentx+rand1)&amp;<span class="number">0xffff</span></span><br><span class="line">                        realy=(currenty+rand2)&amp;<span class="number">0xffff</span></span><br><span class="line">                        </span><br><span class="line">                        andorxy=((realx &amp; realy)+(realx | realy))&amp;<span class="number">0xffff</span></span><br><span class="line">                        xorvy=(realx ^ realy)&amp;<span class="number">0xffff</span></span><br><span class="line">                        imuxy=(realx * realy)&amp;<span class="number">0xffff</span></span><br><span class="line">                        sumxy=(andorxy + xorvy + imuxy)&amp;<span class="number">0xffff</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (sumxy&gt;&gt;<span class="number">15</span>)<span class="keyword">or</span> (andorxy&gt;&gt;<span class="number">15</span>) <span class="keyword">or</span>(xorvy&gt;&gt;<span class="number">15</span>) <span class="keyword">or</span>(sumxy&gt;&gt;<span class="number">15</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span>((realx^realy)&amp;<span class="number">7</span>) <span class="keyword">and</span> ((realx^realy)%<span class="number">8</span>==<span class="number">1</span>):</span><br><span class="line">                            <span class="keyword">if</span>(((realx^realy)&gt;&gt;<span class="number">3</span>)&amp;<span class="number">3</span>==wtype):</span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">hex</span>(input_value))</span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">chr</span>(i4)+<span class="built_in">chr</span>(i3)+<span class="built_in">chr</span>(i2)+<span class="built_in">chr</span>(i1)+<span class="string">"/"</span>)</span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">hex</span>(seed),<span class="built_in">hex</span>(realx),<span class="built_in">hex</span>(realy),<span class="built_in">hex</span>(rand1),<span class="built_in">hex</span>(rand2))</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                            </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>  </span><br></pre></td></tr></tbody></table></figure><blockquote><p>这里展示的只是获得武器的爆破脚本，升级武器的脚本可自行仿照魔改</p></blockquote><h4 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h4><p>利用爆破脚本求解出能够使得v8,v9靠近密码的输入，并实时更新seed和v8,v9的状态，计算出所有的输入</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">song</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"/!!</span></span><br><span class="line"><span class="string">Y0!!</span></span><br><span class="line"><span class="string">}#!!</span></span><br><span class="line"><span class="string">eC!!</span></span><br><span class="line"><span class="string">R\#!</span></span><br><span class="line"><span class="string">1:(!</span></span><br><span class="line"><span class="string">m&amp;!!</span></span><br><span class="line"><span class="string">54fcfbc921e8b735</span></span><br><span class="line"><span class="string">-!1$</span></span><br><span class="line"><span class="string">OK!!</span></span><br><span class="line"><span class="string">PF$P</span></span><br><span class="line"><span class="string">&gt;X(!</span></span><br><span class="line"><span class="string">F#7!</span></span><br><span class="line"><span class="string">NF$1</span></span><br><span class="line"><span class="string">ra!P</span></span><br><span class="line"><span class="string">54fcfbc921e8b735</span></span><br><span class="line"><span class="string">bO!0</span></span><br><span class="line"><span class="string">54fcfbc921e8b735</span></span><br><span class="line"><span class="string">a12caf3cba1e5f13</span></span><br><span class="line"><span class="string">54fcfbc921e8b735</span></span><br><span class="line"><span class="string">111c7ab93a8cbcae</span></span><br><span class="line"><span class="string">a8cdae3240310bdd</span></span><br><span class="line"><span class="string">fist</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第一个输入为用户名，可随意指定</p></blockquote><p>最后使用如下脚本向服务器输入</p><p>pwn提交输入的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">io=remote(<span class="string">"challs.actf.co"</span>, <span class="number">31600</span>)   <span class="comment"># nc challs.actf.co 31600</span></span><br><span class="line"><span class="comment"># io.interactive()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">code</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b'&gt; '</span>)</span><br><span class="line">    io.sendline(code)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">code</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b'Choose your action: '</span>)</span><br><span class="line">    io.sendline(code)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">codes=[<span class="string">rb'"/!!'</span>,<span class="string">rb'Y0!!'</span>,<span class="string">rb'}#!!'</span>,<span class="string">rb'eC!!'</span>,<span class="string">rb'R\#!'</span>,<span class="string">rb'1:(!'</span>,<span class="string">rb'm&amp;!!'</span>,<span class="string">rb'-!1$'</span>,<span class="string">rb'OK!!'</span>,<span class="string">rb'PF$P'</span>,<span class="string">rb'&gt;X(!'</span>,<span class="string">rb'F#7!'</span>,<span class="string">rb'NF$1'</span>,<span class="string">rb'ra!P'</span>,<span class="string">rb'bO!0'</span>,<span class="string">rb'a12caf3cba1e5f13'</span>]</span><br><span class="line">attacks=[<span class="string">rb'54fcfbc921e8b735'</span>,<span class="string">rb'111c7ab93a8cbcae'</span>,<span class="string">rb'a8cdae3240310bdd'</span>,<span class="string">rb'fist'</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(b'Enter your name: ')</span></span><br><span class="line">io.sendline(<span class="string">b'song'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    go(codes[i])</span><br><span class="line">attack(attacks[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,<span class="number">14</span>):</span><br><span class="line">    go(codes[i]) </span><br><span class="line">       </span><br><span class="line">attack(attacks[<span class="number">0</span>])</span><br><span class="line">go(codes[<span class="number">14</span>]) </span><br><span class="line">attack(attacks[<span class="number">0</span>])</span><br><span class="line">go(codes[<span class="number">15</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    attack(attacks[i])</span><br><span class="line"><span class="comment"># io.recv(1024,5)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b'!'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rRt1NCA.png"><br>flag:actf{sorry_guys_no_double_free_this_time}</p>]]></content>
      
      
      
        <tags>
            
            <tag> rev </tag>
            
            <tag> ctf </tag>
            
            <tag> rand </tag>
            
            <tag> rust </tag>
            
            <tag> flatland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>revunity</title>
      <link href="/2022/04/29/revunity/"/>
      <url>/2022/04/29/revunity/</url>
      
        <content type="html"><![CDATA[<p>bugku上面的一道unity逆向题，花了一两天学习一下unity 的逆向</p><span id="more"></span><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><ol><li>Unity 游戏有两种打包方式 mono 与 il2cpp</li><li>在 mono 模式下，游戏 C# 代码被编译为 IL(中间代码) 并生成 dll 文件，然后 dll 被打包进最后的游戏包文件。由于 IL 非常容易被 ILSpy / .NET Reflector 等专业反编译软件分析逆向，所以在无保护情况下，游戏的安全性极差。</li><li>在 il2cpp 模式下，虽然游戏逻辑是以 Native 代码运行, 但依然要实现 C# 某些语言特性（如GC), il2cpp 将所有的 C# 中的类名/属性名/字符串等信息记录在 global-metadata.dat 文件。il2cpp 启动时会从这个文件读取所需要的类名/属性名等信息。</li><li>使用 <strong>IL2cppDumper</strong> 可以解析 <strong>global-metadata.dat</strong> 文件，并将文件里的类名等字符串信息对应到 Native 代码中去</li><li><code>Unity</code>使用<code>Mono</code>方式打出来的<code>apk</code>，我们可以直接从包内拿到<code>Assembly-CSharp.dll</code>，如果开发者没有对<code>Assembly-CSharp.dll</code>进行加密处理，那么我们可以很方便地使用<code>ILSpy.exe</code>对其进行反编译。</li></ol><h3 id="题目介绍-（baby-unity3d）"><a href="#题目介绍-（baby-unity3d）" class="headerlink" title="题目介绍 （baby unity3d）"></a>题目介绍 （baby unity3d）</h3><ul><li><p>在bugku上遇到了一个unity apk需要我们来逆向，但是直接用IDA打开so文件，完全摸不着边际</p></li><li><p>查阅网络上的资料，了解到这个游戏使用了il2cpp的打包方式，需要分析libil2cpp.so和global-metadata.dat文件来获取native中的类名/函数名/变量名等等。</p></li><li><p>这一方面之前从来没有了解过，正好通过这道题来学习一下如何逆向unity的apk</p></li></ul><h3 id="工具环境"><a href="#工具环境" class="headerlink" title="工具环境"></a>工具环境</h3><ol><li>工欲善其事必先利其器，先搞好工具，下个 Il2cppDumper</li></ol><p>安装参考：<a href="https://blog.csdn.net/linxinfa/article/details/116572369">https://blog.csdn.net/linxinfa/article/details/116572369</a></p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427164106462.png" alt="image-20220427164106462"></p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427164141958.png" alt="image-20220427164141958"></p><ol start="2"><li>从apk中提取文件</li></ol><p>解压apk，从\crackme\assets\bin\Data\Managed\Metadata\中提取global-metadata.dat文件；</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427165128875.png" alt="image-20220427165128875"></p><p>从\crackme\lib\armeabi-v7a文件中提取libil2cpp.so文件；</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427165111248.png" alt="image-20220427165111248"></p><ol start="3"><li>回到<code>Il2CppDumper.exe</code>所在的目录，创建<code>input</code>目录和<code>output</code>目录。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427165317242.png" alt="image-20220427165317242"></p><p>将上述两个文件放到input文件夹中，并编写il2cpp_decompilation.bat文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\Il2CppDumper.exe libil2cpp.so global-metadata.dat ..\output</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427165613842.png" alt="image-20220427165613842"></p><blockquote><p>运行bat文件，发现出错了，metadata可能被加密了</p></blockquote><ol start="4"><li>查看global-metadata.dat文件</li></ol><ul><li>使用二进制文本查看器打开global-metadata.dat文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427165822363.png" alt="image-20220427165822363"></p><ul><li>发现文件开头并不是AF 1B B1 FA，说明该文件应该是修改或加密过</li></ul><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><ul><li>想要解密<code>global-metadata.dat</code>我们有两种思路，一种是dump解密结果，另一种是分析加密算法。对于第一种思路，这里有个frida脚本</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">frida_Memory</span>(<span class="params">pattern</span>)</span><br><span class="line">{</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)</span><br><span class="line">{</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"头部标识:"</span> + pattern);</span><br><span class="line">    <span class="keyword">var</span> addrArray = <span class="title class_">Process</span>.<span class="title function_">enumerateRanges</span>(<span class="string">"r--"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; addrArray.<span class="property">length</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> addr = addrArray[i];</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">scan</span>(addr.<span class="property">base</span>, addr.<span class="property">size</span>, pattern,</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">address, size</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'搜索到 '</span> + pattern + <span class="string">" 地址是:"</span> + address.<span class="title function_">toString</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(address,</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">length</span>: <span class="number">64</span>,</span><br><span class="line">                        <span class="attr">header</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">ansi</span>: <span class="literal">true</span></span><br><span class="line">                    }</span><br><span class="line">                    ));</span><br><span class="line">                <span class="comment">//0x108，0x10C如果不行，换0x100，0x104</span></span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">DefinitionsOffset</span> = <span class="built_in">parseInt</span>(address, <span class="number">16</span>) + <span class="number">0x108</span>;</span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">DefinitionsOffset</span>_size = <span class="title class_">Memory</span>.<span class="title function_">readInt</span>(<span class="title function_">ptr</span>(<span class="title class_">DefinitionsOffset</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">DefinitionsCount</span> = <span class="built_in">parseInt</span>(address, <span class="number">16</span>) + <span class="number">0x10C</span>;</span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">DefinitionsCount</span>_size = <span class="title class_">Memory</span>.<span class="title function_">readInt</span>(<span class="title function_">ptr</span>(<span class="title class_">DefinitionsCount</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据两个偏移得出global-metadata大小</span></span><br><span class="line">                <span class="keyword">var</span> global_metadata_size = <span class="title class_">DefinitionsOffset</span>_size + <span class="title class_">DefinitionsCount</span>_size</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"大小："</span>, global_metadata_size);</span><br><span class="line">                <span class="keyword">var</span> file = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/data/data/"</span> + <span class="title function_">get_self_process_name</span>() + <span class="string">"/global-metadata.dat"</span>, <span class="string">"wb"</span>);</span><br><span class="line">                file.<span class="title function_">write</span>(<span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(address, global_metadata_size));</span><br><span class="line">                file.<span class="title function_">flush</span>();</span><br><span class="line">                file.<span class="title function_">close</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'导出完毕...'</span>);</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//console.log("搜索完毕")</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">);</span><br><span class="line">}</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title function_">frida_Memory</span>(<span class="string">"AF 1B B1 FA"</span>)); <span class="comment">//global-metadata.dat头部特征</span></span><br></pre></td></tr></tbody></table></figure><p>大概流程就是通过magic来定位到文件在内存中的起始地址，然后通过解析文件头来计算出文件的大小，最后进行dump。</p><p>该脚本的适用条件是<code>global-metadata.dat</code>在解密后必须要有正常的magic即<code>AF 1B B1 FA</code>来定位，同时文件头信息要正确否则无法计算文件大小。</p><p>这个脚本有一定的参考价值，然而对于这题起不到作用，脚本执行后没有找到起始地址，看来即使解密后，内存中也没有<code>AF 1B B1 FA</code>存在。所以这种通用的dump方式应该是不行了，只能找到<code>global-metadata.dat</code>的加载函数，待其解密完成后再进行dump，所以我们需要对<code>global-metadata.dat</code>的加载流程进行分析。</p><h4 id="global-metadata-dat加载流程"><a href="#global-metadata-dat加载流程" class="headerlink" title="global-metadata.dat加载流程"></a><code>global-metadata.dat</code>加载流程</h4><p>考验英文的时候到了，要先学习了解一下如何跟踪分析global-metadata.dat:<a href="https://katyscode.wordpress.com/2021/02/23/il2cpp-finding-obfuscated-global-metadata/">https://katyscode.wordpress.com/2021/02/23/il2cpp-finding-obfuscated-global-metadata/</a></p><p>简要概括下，在<code>libil2cpp.so</code>里面有个<code>il2cpp_init</code>函数是加载函数调用链中的第一个函数，整个调用链是这样的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">il2cpp_init</span><br><span class="line">  -&gt; il2cpp::vm::Runtime::Init</span><br><span class="line">    -&gt; il2cpp::vm::MetadataCache::Initialize</span><br><span class="line">      -&gt; il2cpp::vm::MetadataLoader::LoadMetadataFile</span><br></pre></td></tr></tbody></table></figure><p>对比IDA中的函数</p><ul><li>il2cpp_init</li></ul><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427210617395.png" alt="image-20220427210617395"></p><ul><li>il2cpp::vm::Runtime::Init</li></ul><p>sub_4C4770</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427210637275.png" alt="image-20220427210637275"></p><ul><li>il2cpp::vm::MetadataCache::Initialize （通过查看特殊的字符发现的，因为“global-metadata.dat”被加密了)</li></ul><p>sub_4B5564</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427210839581.png" alt="image-20220427210839581"></p><p>解密“global-metadata.dat”函数</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427210901754.png" alt="image-20220427210901754"></p><p>运行一下</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427210940132.png" alt="image-20220427210940132"></p><blockquote><p>确实是“global-metadata.dat”</p></blockquote><p>可以看到与“global-metadata.dat”（v0)密切相关的函数是sub_513060，而后面v0就被free掉了，那么</p><p> dword_6959CC就应当对于global-metadata.dat的数据，故而要看sub_513060的返回值</p><p>sub_513060 (return v3)</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427211232124.png" alt="image-20220427211232124"></p><p>根据调用关系，解密dat的函数为sub_512FDC</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">sub_512FDC</span><span class="params">(<span class="type">int</span> a1, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// r2</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( size )</span><br><span class="line">  {</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">      *(_DWORD *)&amp;result[v5 &amp; <span class="number">0xFFFFFFFC</span>] = *(_DWORD *)(a1 + (v5 &amp; <span class="number">0xFFFFFFFC</span>)) ^ dword_5DCF6C[(v5 + v5 / <span class="number">0x84</span>) % <span class="number">0x84</span>];</span><br><span class="line">      v5 += <span class="number">4</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> ( v5 &lt; size );</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解密脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">key=[<span class="number">0xf83da249</span>,<span class="number">0x15d12772</span>,<span class="number">0x40c50697</span>,<span class="number">0x984e2b6b</span>,<span class="number">0x14ec5ff8</span>,<span class="number">0xb2e24927</span>,<span class="number">0x3b8f77ae</span>,<span class="number">0x472474cd</span>,<span class="number">0x5b0ce524</span>,<span class="number">0xa17e1a31</span>,<span class="number">0x6c60852c</span>,<span class="number">0xd86ad267</span>,<span class="number">0x832612b7</span>,<span class="number">0x1ca03645</span>,<span class="number">0x5515abc8</span>,<span class="number">0xc5feff52</span>,<span class="number">0xffffac00</span>,<span class="number">0xfe95cb6</span>,<span class="number">0x79cf43dd</span>,<span class="number">0xaa48a3fb</span>,<span class="number">0xe1d71788</span>,<span class="number">0x97663d3a</span>,<span class="number">0xf5cffea7</span>,<span class="number">0xee617632</span>,<span class="number">0x4b11a7ee</span>,<span class="number">0x40ef0b5</span>,<span class="number">0x606fc00</span>,<span class="number">0xc1530fae</span>,<span class="number">0x7a827441</span>,<span class="number">0xfce91d44</span>,<span class="number">0x8c4cc1b1</span>,<span class="number">0x7294c28d</span>,<span class="number">0x8d976162</span>,<span class="number">0x8315435a</span>,<span class="number">0x3917a408</span>,<span class="number">0xaf7f1327</span>,<span class="number">0xd4bfaed7</span>,<span class="number">0x80d0abfc</span>,<span class="number">0x63923dc3</span>,<span class="number">0xb0e6b35a</span>,<span class="number">0xb815088f</span>,<span class="number">0x9bacf123</span>,<span class="number">0xe32411c3</span>,<span class="number">0xa026100b</span>,<span class="number">0xbcf2ff58</span>,<span class="number">0x641c5cfc</span>,<span class="number">0xc4a2d7dc</span>,<span class="number">0x99e05dca</span>,<span class="number">0x9dc699f7</span>,<span class="number">0xb76a8621</span>,<span class="number">0x8e40e03c</span>,<span class="number">0x28f3c2d4</span>,<span class="number">0x40f91223</span>,<span class="number">0x67a952e0</span>,<span class="number">0x505f3621</span>,<span class="number">0xbaf13d33</span>,<span class="number">0xa75b61cc</span>,<span class="number">0xab6aef54</span>,<span class="number">0xc4dfb60d</span>,<span class="number">0xd29d873a</span>,<span class="number">0x57a77146</span>,<span class="number">0x393f86b8</span>,<span class="number">0x2a734a54</span>,<span class="number">0x31a56af6</span>,<span class="number">0xc5d9160</span>,<span class="number">0xaf83a19a</span>,<span class="number">0x7fc9b41f</span>,<span class="number">0xd079ef47</span>,<span class="number">0xe3295281</span>,<span class="number">0x5602e3e5</span>,<span class="number">0xab915e69</span>,<span class="number">0x225a1992</span>,<span class="number">0xa387f6b2</span>,<span class="number">0x7e981613</span>,<span class="number">0xfc6cf59a</span>,<span class="number">0xd34a7378</span>,<span class="number">0xb608b7d6</span>,<span class="number">0xa9eb93d9</span>,<span class="number">0x26ddb218</span>,<span class="number">0x65f33f5f</span>,<span class="number">0xf9314442</span>,<span class="number">0x5d5c0599</span>,<span class="number">0xea72e774</span>,<span class="number">0x1605a502</span>,<span class="number">0xec6cbc9f</span>,<span class="number">0x7f8a1bd1</span>,<span class="number">0x4dd8cf07</span>,<span class="number">0x2e6d79e0</span>,<span class="number">0x6990418f</span>,<span class="number">0xcf77bad9</span>,<span class="number">0xd4fe0147</span>,<span class="number">0xfef4a3e8</span>,<span class="number">0x85c45bde</span>,<span class="number">0xb58f8e67</span>,<span class="number">0xa63eb8d7</span>,<span class="number">0xc69bd19b</span>,<span class="number">0xda442dca</span>,<span class="number">0x3c0c1743</span>,<span class="number">0xe6f39d49</span>,<span class="number">0x33568804</span>,<span class="number">0x85eb6320</span>,<span class="number">0xda223445</span>,<span class="number">0x36c4a941</span>,<span class="number">0xa9185589</span>,<span class="number">0x71b22d67</span>,<span class="number">0xf59a2647</span>,<span class="number">0x3c8b583e</span>,<span class="number">0xd7717ded</span>,<span class="number">0xdf05699c</span>,<span class="number">0x4378367d</span>,<span class="number">0x1c459339</span>,<span class="number">0x85133b7f</span>,<span class="number">0x49800ce2</span>,<span class="number">0x3666ca0d</span>,<span class="number">0xaf7ab504</span>,<span class="number">0x4ff5b8f1</span>,<span class="number">0xc23772e3</span>,<span class="number">0x3544f31e</span>,<span class="number">0xf673a57</span>,<span class="number">0xf40600e1</span>,<span class="number">0x7e967417</span>,<span class="number">0x15a26203</span>,<span class="number">0x5f2e34ce</span>,<span class="number">0x70c7921a</span>,<span class="number">0xd1c190df</span>,<span class="number">0x5bb5da6b</span>,<span class="number">0x60979c75</span>,<span class="number">0x4ea758a4</span>,<span class="number">0x78fe359</span>,<span class="number">0x1664639c</span>,<span class="number">0xae14e73b</span>,<span class="number">0x2070ff03</span>]</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">"global-metadata.dat"</span>,<span class="string">"rb"</span>)</span><br><span class="line">a=f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"decrypt.dat"</span>,<span class="string">"wb+"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    length=<span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">while</span>(i&lt;length):</span><br><span class="line">        num = struct.unpack(<span class="string">"&lt;I"</span>, a[i:i + <span class="number">4</span>])[<span class="number">0</span>]   <span class="comment"># &lt;:小端法    I:unsigned int</span></span><br><span class="line">        num = num ^ key[(i + i // <span class="number">0x84</span>) % <span class="number">0x84</span>]</span><br><span class="line">        d = struct.pack(<span class="string">'I'</span>, num)</span><br><span class="line">        fp.write(d)</span><br><span class="line">        i = i + <span class="number">4</span>   </span><br></pre></td></tr></tbody></table></figure><p>解密完成后发现还是不能用Il2cppDumper，将解密后的文件放到010editor里发现魔数不对，改成<code>AF 1B B1 FA</code>就行了，原来他把魔数校验的那一步给去掉了，所以可以改魔数，这样就可以防止用前面提到的通用frida脚本来dump了。</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427214423143.png" alt="image-20220427214423143"></p><blockquote><p>感动，迈出了一大步，获得了output内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427214502610.png" alt="image-20220427214502610"></p><h4 id="dump-cs"><a href="#dump-cs" class="headerlink" title="dump.cs"></a>dump.cs</h4><p>:这个文件会把<code>C#</code>的<code>dll</code>代码的类、方法、字段列出来 </p><p>在其中，搜索checkFlag函数</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427214707195.png" alt="image-20220427214707195"></p><h4 id="il2cpp-h"><a href="#il2cpp-h" class="headerlink" title="il2cpp.h"></a>il2cpp.h</h4><p>生成的<code>cpp</code>的头文件，从头文件里我们也可以看到相关的数据结构</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427214829918.png" alt="image-20220427214829918"></p><h4 id="script-json"><a href="#script-json" class="headerlink" title="script.json"></a>script.json</h4><p>显示类的方法信息</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427214925787.png" alt="image-20220427214925787"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">   <span class="attr">"Address"</span><span class="punctuation">:</span> <span class="number">5343780</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">"Name"</span><span class="punctuation">:</span> <span class="string">"Check$$CheckFlag"</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">"Signature"</span><span class="punctuation">:</span> <span class="string">"bool Check__CheckFlag (Check_o* __this, System_String_o* input, const MethodInfo* method);"</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">"TypeSignature"</span><span class="punctuation">:</span> <span class="string">"iiii"</span></span><br><span class="line"> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="寻找check函数"><a href="#寻找check函数" class="headerlink" title="寻找check函数"></a>寻找check函数</h4><p>上一步知道了checkflag函数地址为0x518a24，在IDA中跳到该地址</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427215417344.png" alt="image-20220427215417344"></p><p>利用ida.py还原script.json中的数据</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427221404308.png" alt="image-20220427221404308"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">Check__CheckFlag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !byte_69C825 )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">sub_4B82BC</span>(<span class="number">1279</span>);</span><br><span class="line">    byte_69C825 = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  v3 = Check_TypeInfo;</span><br><span class="line">  <span class="keyword">if</span> ( (*(_BYTE *)(Check_TypeInfo + <span class="number">178</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> &amp;&amp; !*(_DWORD *)(Check_TypeInfo + <span class="number">96</span>) )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">il2cpp_runtime_class_init_0</span>(Check_TypeInfo);</span><br><span class="line">    v3 = Check_TypeInfo;</span><br><span class="line">  }</span><br><span class="line">  v4 = <span class="built_in">Check__AESEncrypt</span>(</span><br><span class="line">         *(_DWORD *)(v3 + <span class="number">80</span>),</span><br><span class="line">         a2,</span><br><span class="line">         *(_DWORD *)(*(_DWORD *)(v3 + <span class="number">80</span>) + <span class="number">4000</span>),</span><br><span class="line">         *(_DWORD *)(*(_DWORD *)(v3 + <span class="number">80</span>) + <span class="number">2364</span>));</span><br><span class="line">  <span class="keyword">if</span> ( (*(_BYTE *)(string_TypeInfo + <span class="number">178</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> &amp;&amp; !*(_DWORD *)(string_TypeInfo + <span class="number">96</span>) )</span><br><span class="line">    <span class="built_in">il2cpp_runtime_class_init_0</span>(string_TypeInfo);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">System_String__op_Equality</span>(<span class="number">0</span>, v4, StringLiteral_2814);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>o(╥﹏╥)o，终于可以看了</p></blockquote><p>愉快地取出关键字符</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220427221631795.png" alt="image-20220427221631795"></p><blockquote><p>StringLiteral_2814:w0ZyUZAHhn16/MRWie63lK+PuVpZObu/NpQ/E/ucplc=</p></blockquote><p>IV和key暂时获取不到，需要用frida来hook出来</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">var</span> soAdrr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">"libil2cpp.so"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> ptrAESEncrypt = soAdrr.<span class="title function_">add</span>(<span class="number">0x518b54</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(ptrAESEncrypt,{</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>){</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[0]-&gt; "</span> + args[<span class="number">0</span>]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[1] text-&gt;\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">1</span>])));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[2]-&gt; password\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">2</span>],{</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">length</span>: <span class="number">12</span>+<span class="number">16</span> * <span class="number">2</span></span><br><span class="line">            })));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[3]-&gt; iv\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">3</span>],{</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">length</span>: <span class="number">12</span>+<span class="number">16</span> * <span class="number">2</span></span><br><span class="line">            })));</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">args</span>){</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h4><p>复习一下frida知识：<a href="https://www.jianshu.com/p/fa422d3b7148">https://www.jianshu.com/p/fa422d3b7148</a></p><p>血泪经验:frida windows版本一定要和sever版本相同，麻了，折腾一天了总算成功了</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27043 tcp:27043</span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">frida-ps -U</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220428190842977.png" alt="image-20220428190842977"></p><p>frida脚本</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">var</span> soAdrr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">"libil2cpp.so"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> ptrAESEncrypt = soAdrr.<span class="title function_">add</span>(<span class="number">0x518b54</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(ptrAESEncrypt,{</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>){</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[0]-&gt; "</span> + args[<span class="number">0</span>]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[1] text-&gt;\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">1</span>])));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[2]-&gt; password\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">2</span>],{</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">length</span>: <span class="number">12</span>+<span class="number">16</span> * <span class="number">2</span></span><br><span class="line">            })));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">"enter ptrAESEncrypt args[3]-&gt; iv\n"</span> + <span class="title function_">hexdump</span>(args[<span class="number">3</span>],{</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">length</span>: <span class="number">12</span>+<span class="number">16</span> * <span class="number">2</span></span><br><span class="line">            })));</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">args</span>){</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>hook这里折腾了一天，模拟器是真的不行！！！！</p><p>最后用jr的真机实现的，哭了—</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220428190810897.png" alt="image-20220428190810897"></p><blockquote><p>pawd: <em>91c775fa0f6a1cba</em></p><p>iv:<em>58f3a445939aeb79</em></p></blockquote><p>在线解密一下</p><p><img src="https://cdn.jsdelivr.net/gh/qxz-coder/typora/images/image-20220428192444555.png" alt="image-20220428192444555"></p><p>不容易，获得flag:N1CTF{h4ppy_W1TH_1l2cpp}</p><p>补个解密的脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># Encryption</span></span><br><span class="line">key=<span class="string">b"91c775fa0f6a1cba"</span></span><br><span class="line">iv=<span class="string">b"58f3a445939aeb79"</span></span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">"w0ZyUZAHhn16/MRWie63lK+PuVpZObu/NpQ/E/ucplc="</span></span><br><span class="line">cipher_text=base64.b64decode(encrypt_data)</span><br><span class="line"><span class="comment"># Decryption</span></span><br><span class="line">decryption_suite = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plain_text = decryption_suite.decrypt(cipher_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"><span class="comment"># N1CTF{h4ppy_W1TH_1l2cpp}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://blog.csdn.net/qq_39268483/article/details/115833605">https://blog.csdn.net/qq_39268483/article/details/115833605</a></p><p><a href="https://www.ashenone66.cn/2022/04/22/il2cpp-ni-xiang-global-metadata-jie-mi/">https://www.ashenone66.cn/2022/04/22/il2cpp-ni-xiang-global-metadata-jie-mi/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rev </tag>
            
            <tag> unity </tag>
            
            <tag> bugku </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
